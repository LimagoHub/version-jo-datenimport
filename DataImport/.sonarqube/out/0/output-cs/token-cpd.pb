ƒ
mC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Job\AbstractJob.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Job8 ;
{ 
public 

abstract 
class 
AbstractJob %
:& '
IJob( ,
{ 
	protected		 
readonly		 
List		 
<		  
IStep		  %
>		% &
_steps		' -
=		. /
new		0 3
List		4 8
<		8 9
IStep		9 >
>		> ?
(		? @
)		@ A
;		A B
public 
void 
AddStep 
( 
IStep !
step" &
)& '
{ 	
_steps 
. 
Add 
( 
step 
) 
; 
} 	
public 
void 

RemoveStep 
( 
IStep $
step% )
)) *
{ 	
_steps 
. 
Remove 
( 
step 
) 
;  
} 	
public 
virtual 
void 
RunAllSteps '
(' (
)( )
{ 	
foreach 
( 
var 
step 
in  
_steps! '
)' (
{ 
step 
. 
Init 
( 
) 
; 
step 
. 
Execute 
( 
) 
; 
step 
. 
Dispose 
( 
) 
; 
} 
} 	
public 
void 
Dispose 
( 
) 
{   	
Dispose!! 
(!! 
true!! 
)!! 
;!! 
GC"" 
."" 
SuppressFinalize"" 
(""  
this""  $
)""$ %
;""% &
}## 	
	protected%% 
virtual%% 
void%% 
Dispose%% &
(%%& '
bool%%' +
	disposing%%, 5
)%%5 6
{&& 	
}(( 	
})) 
}** ²
fC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Job\IJob.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Job8 ;
{ 
public 

	interface 
IJob 
: 
IDisposable &
{ 
void 
AddStep 
( 
IStep 
step 
)  
;  !
void		 

RemoveStep		 
(		 
IStep		 
step		 "
)		" #
;		# $
void

 
RunAllSteps

 
(

 
)

 
;

 
} 
} ‰

oC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Step\AbstractStep.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Step8 <
{ 
public 

abstract 
class 
AbstractStep &
:' (
IStep) .
{ 
public 
virtual 
void 
Init  
(  !
)! "
{ 	
}

 	
public 
void 
Dispose 
( 
) 
{ 	
Dispose 
( 
true 
) 
; 
GC 
. 
SuppressFinalize 
(  
this  $
)$ %
;% &
} 	
	protected 
virtual 
void 
Dispose &
(& '
bool' +
	disposing, 5
)5 6
{ 	
} 	
public 
abstract 
void 
Execute $
($ %
)% &
;& '
} 
} ¸
tC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Step\IdentityProcessor.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Step8 <
{ 
public 

class 
IdentityProcessor "
<" #
T# $
>$ %
:& '

IProcessor( 2
<2 3
T3 4
,4 5
T6 7
>7 8
{ 
public 
T 
Process 
( 
T 
p 
) 
{ 	
return 
p 
; 
} 	
}		 
}

 ¦
mC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Step\IProcessor.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Step8 <
{ 
public 

	interface 

IProcessor 
<  
in  "
P# $
,$ %
out& )
R* +
>+ ,
{ 
R 	
Process
 
( 
P 
p 
) 
; 
} 
} Ñ
jC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Step\IReader.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Step8 <
{ 
public 

	interface 
IReader 
< 
out  
T! "
>" #
{ 
T 	
Read
 
( 
) 
; 
} 
} Ž
hC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Step\IStep.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Step8 <
{ 
public 

	interface 
IStep 
: 
IDisposable '
{ 
void 
Init 
( 
) 
; 
void 
Execute 
( 
) 
; 
}

 
} ò
jC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Step\IWriter.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Step8 <
{ 
public 

	interface 
IWriter 
< 
in 
T  !
>! "
{ 
void 
Write 
( 
T 
t 
) 
; 
} 
} Ž
xC:\Users\JoachimWagner\Documents\Projekte\Bundesbank\SpielWiese\DataImport\BatchProcessing\Step\ReaderProcessorWriter.cs
	namespace 	
BBk
 
. 
Rc1 
. 
Ricis 
. 
SharedLibraries '
.' (
BatchProcessing( 7
.7 8
Step8 <
{ 
public 

class !
ReaderProcessorWriter &
<& '
R' (
,( )
W* +
>+ ,
:- .
AbstractStep/ ;
{ 
private 
IReader 
< 
R 
> 
Reader !
{" #
get$ '
;' (
set) ,
;, -
}. /
private 

IProcessor 
< 
R 
, 
W 
>  
	Processor! *
{+ ,
get- 0
;0 1
set2 5
;5 6
}7 8
private 
IWriter 
< 
W 
> 
Writer !
{" #
get$ '
;' (
set) ,
;, -
}. /
public		 !
ReaderProcessorWriter		 $
<		$ %
R		% &
,		& '
W		( )
>		) *

InitReader		+ 5
(		5 6
IReader		6 =
<		= >
R		> ?
>		? @
reader		A G
)		G H
{

 	
Reader 
= 
reader 
; 
return 
this 
; 
} 	
public !
ReaderProcessorWriter $
<$ %
R% &
,& '
W( )
>) *
InitProcessor+ 8
(8 9

IProcessor9 C
<C D
RD E
,E F
WG H
>H I
	processorJ S
)S T
{ 	
	Processor 
= 
	processor !
;! "
return 
this 
; 
} 	
public !
ReaderProcessorWriter $
<$ %
R% &
,& '
W( )
>) *

InitWriter+ 5
(5 6
IWriter6 =
<= >
W> ?
>? @
writerA G
)G H
{ 	
Writer 
= 
writer 
; 
return 
this 
; 
} 	
public 
override 
void 
Execute $
($ %
)% &
{ 	
Writer 
. 
Write 
( 
	Processor "
." #
Process# *
(* +
Reader+ 1
.1 2
Read2 6
(6 7
)7 8
)8 9
)9 :
;: ;
} 	
} 
}   